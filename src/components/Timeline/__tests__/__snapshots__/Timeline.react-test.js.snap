// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Timeline renders correctly 1`] = `
ShallowWrapper {
  "complexSelector": ComplexSelector {
    "buildPredicate": [Function],
    "childrenOfNode": [Function],
    "findWhereUnwrapped": [Function],
  },
  "length": 1,
  "node": <section
    className="Timeline"
>
    <header
        className="Timeline_header"
    >
        <div
            className="Timeline_search"
        >
            <input
                className="Timeline_search_input"
                placeholder="Search"
                type="search"
            />
        </div>
    </header>
    <div
        className="Timeline_date_label"
    >
        Today
    </div>
    <ol
        className="Timeline_items"
    />
</section>,
  "nodes": Array [
    <section
      className="Timeline"
>
      <header
            className="Timeline_header"
      >
            <div
                  className="Timeline_search"
            >
                  <input
                        className="Timeline_search_input"
                        placeholder="Search"
                        type="search"
                  />
            </div>
      </header>
      <div
            className="Timeline_date_label"
      >
            Today
      </div>
      <ol
            className="Timeline_items"
      />
</section>,
  ],
  "options": Object {},
  "renderer": ReactShallowRenderer {
    "_instance": ShallowComponentWrapper {
      "_calledComponentWillUnmount": false,
      "_compositeType": 0,
      "_context": Object {},
      "_currentElement": <Timeline />,
      "_debugID": 1,
      "_hostContainerInfo": null,
      "_hostParent": null,
      "_instance": Timeline {
        "_reactInternalInstance": [Circular],
        "context": Object {},
        "props": Object {},
        "refs": Object {},
        "state": null,
        "updater": Object {
          "enqueueCallback": [Function],
          "enqueueCallbackInternal": [Function],
          "enqueueElementInternal": [Function],
          "enqueueForceUpdate": [Function],
          "enqueueReplaceState": [Function],
          "enqueueSetState": [Function],
          "isMounted": [Function],
          "validateCallback": [Function],
        },
      },
      "_mountOrder": 1,
      "_pendingCallbacks": null,
      "_pendingElement": null,
      "_pendingForceUpdate": false,
      "_pendingReplaceState": false,
      "_pendingStateQueue": null,
      "_renderedComponent": NoopInternalComponent {
        "_currentElement": <section
          className="Timeline"
>
          <header
                    className="Timeline_header"
          >
                    <div
                              className="Timeline_search"
                    >
                              <input
                                        className="Timeline_search_input"
                                        placeholder="Search"
                                        type="search"
                              />
                    </div>
          </header>
          <div
                    className="Timeline_date_label"
          >
                    Today
          </div>
          <ol
                    className="Timeline_items"
          />
</section>,
        "_debugID": 2,
        "_renderedOutput": <section
          className="Timeline"
>
          <header
                    className="Timeline_header"
          >
                    <div
                              className="Timeline_search"
                    >
                              <input
                                        className="Timeline_search_input"
                                        placeholder="Search"
                                        type="search"
                              />
                    </div>
          </header>
          <div
                    className="Timeline_date_label"
          >
                    Today
          </div>
          <ol
                    className="Timeline_items"
          />
</section>,
      },
      "_renderedNodeType": 0,
      "_rootNodeID": 0,
      "_topLevelWrapper": null,
      "_updateBatchNumber": null,
      "_warnedAboutRefsInRender": false,
    },
    "getRenderOutput": [Function],
    "render": [Function],
  },
  "root": [Circular],
  "unrendered": <Timeline />,
}
`;

exports[`Timeline renders its children correctly 1`] = `
ShallowWrapper {
  "complexSelector": ComplexSelector {
    "buildPredicate": [Function],
    "childrenOfNode": [Function],
    "findWhereUnwrapped": [Function],
  },
  "length": 1,
  "node": <section
    className="Timeline"
>
    <header
        className="Timeline_header"
    >
        <div
            className="Timeline_search"
        >
            <input
                className="Timeline_search_input"
                placeholder="Search"
                type="search"
            />
        </div>
    </header>
    <div
        className="Timeline_date_label"
    >
        Today
    </div>
    <ol
        className="Timeline_items"
    >
        <GoalCard
            onClick={[Function]}
            title="Lorem Ipsum"
        >
            <GoalCardItem
                isComplete={true}
                label="test1"
            />
            <GoalCardItem
                label="test2"
            />
        </GoalCard>
        <GoalCard
            onClick={[Function]}
            title="Lorem Ipsum"
        >
            <GoalCardItem
                isComplete={true}
                label="test1"
            />
            <GoalCardItem
                label="test2"
            />
        </GoalCard>
        <GoalCard
            onClick={[Function]}
            title="Lorem Ipsum"
        >
            <GoalCardItem
                isComplete={true}
                label="test1"
            />
            <GoalCardItem
                label="test2"
            />
        </GoalCard>
    </ol>
</section>,
  "nodes": Array [
    <section
      className="Timeline"
>
      <header
            className="Timeline_header"
      >
            <div
                  className="Timeline_search"
            >
                  <input
                        className="Timeline_search_input"
                        placeholder="Search"
                        type="search"
                  />
            </div>
      </header>
      <div
            className="Timeline_date_label"
      >
            Today
      </div>
      <ol
            className="Timeline_items"
      >
            <GoalCard
                  onClick={[Function]}
                  title="Lorem Ipsum"
            >
                  <GoalCardItem
                        isComplete={true}
                        label="test1"
                  />
                  <GoalCardItem
                        label="test2"
                  />
            </GoalCard>
            <GoalCard
                  onClick={[Function]}
                  title="Lorem Ipsum"
            >
                  <GoalCardItem
                        isComplete={true}
                        label="test1"
                  />
                  <GoalCardItem
                        label="test2"
                  />
            </GoalCard>
            <GoalCard
                  onClick={[Function]}
                  title="Lorem Ipsum"
            >
                  <GoalCardItem
                        isComplete={true}
                        label="test1"
                  />
                  <GoalCardItem
                        label="test2"
                  />
            </GoalCard>
      </ol>
</section>,
  ],
  "options": Object {},
  "renderer": ReactShallowRenderer {
    "_instance": ShallowComponentWrapper {
      "_calledComponentWillUnmount": false,
      "_compositeType": 0,
      "_context": Object {},
      "_currentElement": <Timeline>
        <GoalCard
                onClick={[Function]}
                title="Lorem Ipsum"
        >
                <GoalCardItem
                        isComplete={true}
                        label="test1"
                />
                <GoalCardItem
                        label="test2"
                />
        </GoalCard>
        <GoalCard
                onClick={[Function]}
                title="Lorem Ipsum"
        >
                <GoalCardItem
                        isComplete={true}
                        label="test1"
                />
                <GoalCardItem
                        label="test2"
                />
        </GoalCard>
        <GoalCard
                onClick={[Function]}
                title="Lorem Ipsum"
        >
                <GoalCardItem
                        isComplete={true}
                        label="test1"
                />
                <GoalCardItem
                        label="test2"
                />
        </GoalCard>
</Timeline>,
      "_debugID": 3,
      "_hostContainerInfo": null,
      "_hostParent": null,
      "_instance": Timeline {
        "_reactInternalInstance": [Circular],
        "context": Object {},
        "props": Object {
          "children": Array [
            <GoalCard
              onClick={[Function]}
              title="Lorem Ipsum"
>
              <GoalCardItem
                            isComplete={true}
                            label="test1"
              />
              <GoalCardItem
                            label="test2"
              />
</GoalCard>,
            <GoalCard
              onClick={[Function]}
              title="Lorem Ipsum"
>
              <GoalCardItem
                            isComplete={true}
                            label="test1"
              />
              <GoalCardItem
                            label="test2"
              />
</GoalCard>,
            <GoalCard
              onClick={[Function]}
              title="Lorem Ipsum"
>
              <GoalCardItem
                            isComplete={true}
                            label="test1"
              />
              <GoalCardItem
                            label="test2"
              />
</GoalCard>,
          ],
        },
        "refs": Object {},
        "state": null,
        "updater": Object {
          "enqueueCallback": [Function],
          "enqueueCallbackInternal": [Function],
          "enqueueElementInternal": [Function],
          "enqueueForceUpdate": [Function],
          "enqueueReplaceState": [Function],
          "enqueueSetState": [Function],
          "isMounted": [Function],
          "validateCallback": [Function],
        },
      },
      "_mountOrder": 2,
      "_pendingCallbacks": null,
      "_pendingElement": null,
      "_pendingForceUpdate": false,
      "_pendingReplaceState": false,
      "_pendingStateQueue": null,
      "_renderedComponent": NoopInternalComponent {
        "_currentElement": <section
          className="Timeline"
>
          <header
                    className="Timeline_header"
          >
                    <div
                              className="Timeline_search"
                    >
                              <input
                                        className="Timeline_search_input"
                                        placeholder="Search"
                                        type="search"
                              />
                    </div>
          </header>
          <div
                    className="Timeline_date_label"
          >
                    Today
          </div>
          <ol
                    className="Timeline_items"
          >
                    <GoalCard
                              onClick={[Function]}
                              title="Lorem Ipsum"
                    >
                              <GoalCardItem
                                        isComplete={true}
                                        label="test1"
                              />
                              <GoalCardItem
                                        label="test2"
                              />
                    </GoalCard>
                    <GoalCard
                              onClick={[Function]}
                              title="Lorem Ipsum"
                    >
                              <GoalCardItem
                                        isComplete={true}
                                        label="test1"
                              />
                              <GoalCardItem
                                        label="test2"
                              />
                    </GoalCard>
                    <GoalCard
                              onClick={[Function]}
                              title="Lorem Ipsum"
                    >
                              <GoalCardItem
                                        isComplete={true}
                                        label="test1"
                              />
                              <GoalCardItem
                                        label="test2"
                              />
                    </GoalCard>
          </ol>
</section>,
        "_debugID": 4,
        "_renderedOutput": <section
          className="Timeline"
>
          <header
                    className="Timeline_header"
          >
                    <div
                              className="Timeline_search"
                    >
                              <input
                                        className="Timeline_search_input"
                                        placeholder="Search"
                                        type="search"
                              />
                    </div>
          </header>
          <div
                    className="Timeline_date_label"
          >
                    Today
          </div>
          <ol
                    className="Timeline_items"
          >
                    <GoalCard
                              onClick={[Function]}
                              title="Lorem Ipsum"
                    >
                              <GoalCardItem
                                        isComplete={true}
                                        label="test1"
                              />
                              <GoalCardItem
                                        label="test2"
                              />
                    </GoalCard>
                    <GoalCard
                              onClick={[Function]}
                              title="Lorem Ipsum"
                    >
                              <GoalCardItem
                                        isComplete={true}
                                        label="test1"
                              />
                              <GoalCardItem
                                        label="test2"
                              />
                    </GoalCard>
                    <GoalCard
                              onClick={[Function]}
                              title="Lorem Ipsum"
                    >
                              <GoalCardItem
                                        isComplete={true}
                                        label="test1"
                              />
                              <GoalCardItem
                                        label="test2"
                              />
                    </GoalCard>
          </ol>
</section>,
      },
      "_renderedNodeType": 0,
      "_rootNodeID": 0,
      "_topLevelWrapper": null,
      "_updateBatchNumber": null,
      "_warnedAboutRefsInRender": false,
    },
    "getRenderOutput": [Function],
    "render": [Function],
  },
  "root": [Circular],
  "unrendered": <Timeline>
    <GoalCard
        onClick={[Function]}
        title="Lorem Ipsum"
    >
        <GoalCardItem
            isComplete={true}
            label="test1"
        />
        <GoalCardItem
            label="test2"
        />
    </GoalCard>
    <GoalCard
        onClick={[Function]}
        title="Lorem Ipsum"
    >
        <GoalCardItem
            isComplete={true}
            label="test1"
        />
        <GoalCardItem
            label="test2"
        />
    </GoalCard>
    <GoalCard
        onClick={[Function]}
        title="Lorem Ipsum"
    >
        <GoalCardItem
            isComplete={true}
            label="test1"
        />
        <GoalCardItem
            label="test2"
        />
    </GoalCard>
</Timeline>,
}
`;
